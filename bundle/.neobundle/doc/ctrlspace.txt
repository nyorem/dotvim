*ctrlspace.txt*                  For Vim version 7.3      Last change: 2014-03-29
*ctrlspace*






                               Vim-CtrlSpace 3.3.8~

                            Vim Workspace Controller






Copyright (c) 2013-2014 Szymon Wrozynski and Contributors

==============================================================================
Table of Contents

    1. About...................................................|ctrlspace-about|
    2. Usage...................................................|ctrlspace-usage|
    3. Configuration...................................|ctrlspace-configuration|
    4. API.......................................................|ctrlspace-api|
    5. Author and License.............................|ctrlspace-author-license|

------------------------------------------------------------------------------
1. About                                                       *ctrlspace-about*

Vim-CtrlSpace is a great plugin that helps you to get more power from Vim
while working with buffers, tabs, windows, and so on. It is meant to organize
your Vim screen space and your workspace effectively. To accomplish that
Vim-CtrlSpace introduces a concept of separated buffer lists per tab and
provides a lot of power around that (buffer and file management, multiple
workspaces stored on disk, fuzzy search, tab management, and more).

Its name follows the convention of naming similar plugins after their default
mappings (like Command-T or CtrlP). Obviously, the plugin mapping is by
default <C-Space>.

1.1 Demo~

Here's a small demonstration. Viewing in HD advised!

https://www.youtube.com/watch?v=09l92uwKupI

The Demo has been recorded with:

- a console Vim 7.4 (Menslo font)
- a bit modified Seoul256 color scheme (https://github.com/szw/seoul256.vim)
- following Vim-CtrlSpace settings in `.vimrc`: >

    hi CtrlSpaceSelected term=reverse ctermfg=187  ctermbg=23  cterm=bold
    hi CtrlSpaceNormal   term=NONE    ctermfg=244  ctermbg=232 cterm=NONE
    hi CtrlSpaceFound    ctermfg=220  ctermbg=NONE cterm=bold
<
- music: Professor Kliq - Curriculum Vitae
  (http://www.jamendo.com/pl/list/a109465/curriculum-vitae)

------------------------------------------------------------------------------
2. Usage                                                       *ctrlspace-usage*

Vim-CtrlSpace currently contains 3 different lists: Buffer List, Tab List,
and Workspace List. Some of those have additional modes.

2.1 Status Line~

Vim-CtrlSpace requires a status bar. If you are using a plugin customizing
the status bar this could be a bit tricky. For example
vim-airline (https://github.com/bling/vim-airline) plugin might require you to
set: >

    let g:airline_exclude_preview = 1
<

option and LightLine (https://github.com/itchyny/lightline.vim) will require
to use custom status line segments, provided by Vim-CtrlSpace API.

2.1.1 Status Line Symbols~

Unicode | ASCII | List           | Description
========+=======+================+===================================
  ▢     |  CS   | All            | Vim-CtrlSpace symbol
--------+-------+----------------+-----------------------------------
   ⊙    |  TAB  | Buffer List    | Single Tab mode indicator
--------+-------+----------------+-----------------------------------
   ∷    |  ALL  | Buffer List    | All Tabs mode indicator
--------+-------+----------------+-----------------------------------
   ○    |  ADD  | Buffer List    | Add a File mode indicator
--------+-------+----------------+-----------------------------------
   ⌕    |   *   | Buffer List    | Preview mode indicator
--------+-------+----------------+-----------------------------------
  ›_‹   |  [_]  | Buffer List    | Search mode or search order
--------+-------+----------------+-----------------------------------
  ₁²₃   |  123  | Buffer List    | Order buffers by numbers
        |       |                | (in Single Tab and All Tabs modes)
--------+-------+----------------+-----------------------------------
  авс   |  ABC  | Buffer List    | Order buffers alphabetically
        |       |                | (in Single Tab and All Tabs modes)
--------+-------+----------------+-----------------------------------
  ∘∘∘   | TABS  | Tab List       | Tab List indicator
--------+-------+----------------+-----------------------------------
 ⋮ → ∙  | LOAD  | Workspace List | Workspace Load mode
--------+-------+----------------+-----------------------------------
 ∙ → ⋮  | SAVE  | Workspace List | Workspace Save mode

2.2 Tabline~

Vim-CtrlSpace can set a custom tabline. If the proper option is enabled
(g:ctrlspace_use_tabline), the plugin will set a custom tabline for you. The
tabs in that tabline are displayed in the following way:

Unicode | 1   | ²       | +        | [README.md]
--------+-----+---------+----------+------------
ASCII   | 1   | :2      | +        | [README.md]
--------+-----+---------+----------+------------
Desc    | Tab | Buffers | Modified | Name

If GUI tabs are detected, this option will also set the proper function to
`guitablabel`.

2.3 Tab Management~

Tabs in Vim-CtrlSpace (like in Vim) are groups of related buffers. The
plugin lets you to perform many classic tab actions easily in the Buffer List
view and of course in the Tab List view (turned on with letter `l`).
Those ones include e.g. switching (`[` and `]`), moving (`+` and `-`),
closing (uppercase `C`), or renaming (`=`).

You can also create empty tabs (`T`) or copy them (`Y`). The latter action is
useful if you want to split your tab (your group of buffers) into smaller ones.
Referring to the demo example, the tab `Users` (holding model files, controller
files and views) could be split into something like `Users (models)` and
`Users (views)`. `Users (models)` could then have model and controller files
whereas `Users (views)` could be storing controller and view ones. With the
help of tab copying (`Y`) all you need is to copy the `Users` tab, close
superfluous buffers in each (lowercase `c`), and finally rename both (`=`).
Of course, the split shown in that example might be a bit dummy but in
a typical project there are a lot of natural splits, like for example,
backend and frontend layers.

2.4 Project Root~

The plugin requires a project root to work properly. If you open the plugin
window for the first time it will try to find out the possible root directory.
First, it starts in the Vim current working directory and check if there are so
called root markers. The root markers are characteristic files or directories
that are available in an exemplary project root directory, like e.g. `.git` or
`.hg` directories. You can define them yourself in the
`g:ctrlspace_project_root_markers` variable. If no markers found, the plugin
will check if perhaps this directory is a known root. The known roots are those
ones you provided (accepted) yourself when no markers were found. If the current
directory cannot be proven as a project root, the algorithm will repeat the
whole procedure in the parent one.

After checking all predecessors it will ask you to provide the root folder
explicitly. After your acceptance that root folder will be stored pemanently in
the `.cs_cache` file as serve as a known root later.

2.5 Lists~

The plugin have 3 lists, and each of them can have additional modes. In a modal
editor like Vim this should not fear you ;). I believe this division is clear
to recognize and understand.

2.5.1 Buffer List~

This is the basic list the plugin offers. Depending of its mode it can collect
buffers from the current tab, buffers from all tabs, and even list of all
project files (in the Add a File mode).

Items listed in the plugin window can have additional indicators
(following the item text):

Unicode Symbol | ASCII Symbol | Indicator
===============+==============+=========================
       +       |       +      | Item modified
---------------+--------------+-------------------------
       ★       |       *      | Item visible (or active)

2.5.1.1 Single Tab Mode~

Unicode Symbol | ASCII Symbol
===============+=============
       ⊙       |     TAB

The first mode of Buffer List is the Single Tab one. In that mode, the plugin
shows you only buffers related to the current tab. Here's the full listing of
full available keys:

Keys Reference~

Help~

Key       | Action
==========+================================================================
?         | Toggles info about available keys
          | (depends on space left in the status bar)

Opening~

Key       | Action
==========+================================================================
CR        | Opens a selected buffer
----------+----------------------------------------------------------------
Space     | Opens a selected buffer and stays in the Vim-CtrlSpace window
----------+----------------------------------------------------------------
Tab       | Enters the Preview mode for selected buffer
----------+----------------------------------------------------------------
v         | Opens selected buffer in a new vertical split
----------+----------------------------------------------------------------
s         | Opens selected buffer in a new horizontal split
----------+----------------------------------------------------------------
t         | Opens selected buffer in a new tab

Searching & sorting~

Key       | Action
==========+================================================================
/         | Enters the Search mode
----------+----------------------------------------------------------------
\         | Enters the Search mode in the Add a Files mode immediately
          | (a shortcut for `A/`)
----------+----------------------------------------------------------------
C-p       | Brings back the previous searched text
----------+----------------------------------------------------------------
C-n       | Brings the next searched text - just the opposite to `C-p`
----------+----------------------------------------------------------------
o         | Toggles the sorting order (chronological vs alphanumeric)

Tabs operations~

Key       | Action
==========+================================================================
T         | Creates a new tab and stays in the plugin window
----------+----------------------------------------------------------------
Y         | Copies (yanks) the current tab into a new one
----------+----------------------------------------------------------------
0..9      | Jumps to the n-th tab (0 is for the 10th one)
----------+----------------------------------------------------------------
-         | Moves the current tab to the left (decreases its number)
----------+----------------------------------------------------------------
+         | Moves the current tab to the right (increases its number)
----------+----------------------------------------------------------------
=         | Changes the tab name
----------+----------------------------------------------------------------
_         | Removes a custom tab name
----------+----------------------------------------------------------------
[         | Goes to the previous (left) tab
----------+----------------------------------------------------------------
]         | Goes to the next (right) tab

Exiting~

Key       | Action
==========+================================================================
Backspace | Goes back (in this mode it will just close the plugin window)
----------+----------------------------------------------------------------
q         | Closes the list - depends on plugin mappings
Esc       |
C-Space   |
----------+----------------------------------------------------------------
Q         | Quits Vim (but with a prompt if unsaved workspaces or tab
          | buffers were found)

Moving~

Key       | Action
==========+================================================================
j         | Moves the selection bar down
----------+----------------------------------------------------------------
k         | Moves the selection bar up
----------+----------------------------------------------------------------
J         | Moves the selection bar to the bottom of the list
----------+----------------------------------------------------------------
K         | Moves the selection bar to the top of the list
----------+----------------------------------------------------------------
p         | Moves the selection bar to the previous opened buffer
----------+----------------------------------------------------------------
P         | Moves the selection bar to the previous opened buffer and opens
          | it immediately
----------+----------------------------------------------------------------
n         | Moves the selection bar to the next opened buffer
          | (just the reverse of `p`)
----------+----------------------------------------------------------------
C-f       | Moves the selection bar one screen down
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-b       | Moves the selection bar one screen up
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-d       | Moves the selection bar a half screen down
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-u       | Moves the selection bar a half screen up
          | (just like standard Vim behavior)

Closing~

Key       | Action
==========+================================================================
d         | Deletes the selected buffer (closes it)
----------+----------------------------------------------------------------
D         | Closes all empty noname buffers
----------+----------------------------------------------------------------
f         | Forgets the current buffer (make it a foreign (unrelated) to
          | the current tab)
----------+----------------------------------------------------------------
F         | Deletes (closes) all forgotten buffers (unrelated to any tab)
----------+----------------------------------------------------------------
c         | Combines `c` and `d`. If the selected buffer is opened
          | only in the current tab - `c` will close (delete) it.
          | Otherwise it will just forget it (detach from the current tab)
----------+----------------------------------------------------------------
C         | Closes the current tab, then performs `F` (closes forgotten
          | buffers - probably these from that just closed tab) and `D`
          | (closes empty nonames)
----------+----------------------------------------------------------------

Disk operations~

Key       | Action
==========+================================================================
e         | Edits a sibling of the selected buffer
          | (it will create a new one if necessary)
----------+----------------------------------------------------------------
E         | Explores a directory of the selected buffer
----------+----------------------------------------------------------------
R         | Removes the selected buffer (file) entirely (from the disk too)
----------+----------------------------------------------------------------
m         | Moves or renames the selected buffer (together with its file)
----------+----------------------------------------------------------------
y         | Copies selected file (won't work with buffers without files)

Mode changing~

Key       | Action
==========+================================================================
a         | Toggles between Single Tab and All Tabs modes
----------+----------------------------------------------------------------
A         | Enters the Add a File mode
----------+----------------------------------------------------------------

List changing~

Key       | Action
==========+================================================================
l         | Toggles the Tab List view
----------+----------------------------------------------------------------
w         | Toggles the Workspace List view

Workspace shortcuts~

Key       | Action
==========+================================================================
S         | Saves the workspace immediately (or creates a new one if none)
----------+----------------------------------------------------------------
L         | Loads the last active workspace (if present)


2.5.1.2 All Tabs Mode~

Unicode Symbol | ASCII Symbol
===============+=============
       ∷       |     ALL

This mode is almost identical to the Single Tab mode, except it shows you all
available buffers (from all tabs and unrelated ones too). Some of keys presented
in the Single Tab mode are not available here. The missing ones are `f` and
`c` - as they are tightly coupled with the current tab.

2.5.1.3 Add Mode~

Unicode Symbol | ASCII Symbol
===============+=============
       ○       |     ADD

It allows you to append a new file (as a buffer) to the current tab. In other
words, it opens files from the project root directory. Notice, only the project
root directory is considered here. This will prevent you from accidental loading
root of i.e. your home directory, as it would be really time consuming (this
mode starts file scanning) and rather pointless.

For the first time (or after some disk operations) the file list is populated
with data. Sometimes, for a very large project this could be quite time
consuming (I've noticed a lag for a project with over 2200 files). After that,
the content of the project root directory is cached and available immediately.
All the time you can force plugin to refresh the list with the `r` key.

Keys Reference~

Help~

Key       | Action
==========+================================================================
?         | Toggles info about available keys
          | (depends on space left in the status bar)

Opening~

Key       | Action
==========+================================================================
CR        | Opens a selected file
----------+----------------------------------------------------------------
Space     | Opens a selected file but stays in the Vim-CtrlSpace window
----------+----------------------------------------------------------------
v         | Opens a selected file in a new vertical split
----------+----------------------------------------------------------------
s         | Opens a selected file in a new horizontal split
----------+----------------------------------------------------------------
t         | Opens a selected file in a new tab

Exiting~

Key       | Action
==========+================================================================
Backspace | Goes back (here it will return to Single Tab or All Tabs mode)
a         |
A         |
----------+----------------------------------------------------------------
q         | Closes the list - depends on plugin mappings
Esc       |
C-Space   |
----------+----------------------------------------------------------------
Q         | Quits Vim (but with a prompt if unsaved workspaces or tab
          | buffers were found)

Tabs operations~

Key       | Action
==========+================================================================
T         | Creates a new tab and stays in the plugin window
----------+----------------------------------------------------------------
Y         | Copies (yanks) the current tab into a new one
----------+----------------------------------------------------------------
0..9      | Jumps to the n-th tab (0 is for 10th one)
----------+----------------------------------------------------------------
-         | Moves the current tab to the left (decreases its number)
----------+----------------------------------------------------------------
+         | Moves the current tab to the right (increases its number)
----------+----------------------------------------------------------------
=         | Changes the tab name
----------+----------------------------------------------------------------
_         | Removes a custom tab name
----------+----------------------------------------------------------------
[         | Goes to the previous (left) tab
----------+----------------------------------------------------------------
]         | Goes to the next (right) tab

Searching~

Key       | Action
==========+================================================================
/         | Enters the Search mode
\         |
----------+----------------------------------------------------------------
C-p       | Brings back the previous searched text
----------+----------------------------------------------------------------
C-n       | Brings the next searched text - just the opposite to `C-p`

Moving~

Key       | Action
==========+================================================================
j         | Moves the selection bar down
----------+----------------------------------------------------------------
k         | Moves the selection bar up
----------+----------------------------------------------------------------
J         | Moves the selection bar to the bottom of the list
----------+----------------------------------------------------------------
K         | Moves the selection bar to the top of the list
----------+----------------------------------------------------------------
C-f       | Moves the selection bar one screen down
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-b       | Moves the selection bar one screen up
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-d       | Moves the selection bar a half screen down
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-u       | Moves the selection bar a half screen up
          | (just like standard Vim behavior)

Closing~

Key       | Action
==========+================================================================
C         | Closes the current tab, then closes forgotten buffers and
          | empty nonames

Disk operations~

Key       | Action
==========+================================================================
e         | Edits a sibling of the selected buffer
          | (it will create a new one if necessary)
----------+----------------------------------------------------------------
E         | Explores a directory of the selected buffer
----------+----------------------------------------------------------------
r         | Refreshes the file list (forces reloading)
----------+----------------------------------------------------------------
R         | Removes the selected file entirely
----------+----------------------------------------------------------------
m         | Moves or renames the selected file
----------+----------------------------------------------------------------
y         | Copies the selected file

List changing~

Key       | Action
==========+================================================================
l         | Toggles the Tab List view
----------+----------------------------------------------------------------
w         | Toggles the Workspace List view


2.5.1.4 Preview Mode~

Unicode Symbol | ASCII Symbol
===============+=============
       ⌕       |     *

This mode works in a conjunction with buffer-related modes: Single Tab and All
Tabs. You can invoke the Preview mode by hitting the `Tab` key. Hitting `Tab`
does almost the same as `Space` - it shows you the selected buffer, but unlike
`Space`, that change of the target window content is not permanent. When you
quit the plugin window, the old (previous) content of the target window is
restored.

Also the jumps history remains unchanged and the selected buffer won't be added
to the tab buffer list. In that way, you can just preview a buffer before
actually opening it (with `Space`, `Return`, etc).

Those previewed files are marked on the list with the star symbol and the
original content is marked with an empty star too:

Indicator          | Unicode Symbol | ASCII Symbol
===================+================+=============
Previewed buffer   |        ★       |      *
-------------------+----------------+-------------
Original buffer    |        ☆       |      *

2.5.1.5 Search Mode~

Unicode Symbol | ASCII Symbol
===============+=============
      ›_‹      |     [_]

This mode is composed of two states or two phases. The first one is the
"entering phase". Technically, this is the extact Search mode. In the entering
phase the following keys are available:

Keys Reference (entering phase)~

Key       | Action
==========+================================================================
?         | Toggles info about available keys
          | (depends on space left in the status bar)
----------+----------------------------------------------------------------
CR        | Closes the entering phase. Accepts the entered content.
----------+----------------------------------------------------------------
Backspace | Removes the previouse entered character, or closes the entering
          | phase if no character found.
----------+----------------------------------------------------------------
/         | Toggles the entering phase
----------+----------------------------------------------------------------
\         | Toggles the entering phase (only in the Add a File mode)
----------+----------------------------------------------------------------
a..z      | The charactes allowed in the entering phase
A..Z      |
0..9      |

Besides the entering phase there is also a second state possible. That is the
state of having a search query entered. The successfully entered query behaves
just like a kind of sorting. In fact, it is just a kind of sorting and filtering
function. So it doesn't impact on other modes except it narrows the result set.

It's worth to mention that in that mode the `Backspace` key removes the search
query entirely.

2.5.1.6 Nop Mode~

Nop (Non-Operational) mode happens when i.e. there are no items to show (empty
list), or you are trying to type a Search query, and there are no results at
all. That means the Nop can happen during the _entering phase_ of the Search
mode or in some other cases. Those other cases can occur, for example, when you
have only not listed buffers available in the tab (like e.g. help window and
some preview ones). As you will see, in such circumstances - that is outside
the entering phase - there is a greater number of resque options available.

2.5.1.6.1 Nop (Search entering phase)~

Key       | Action
==========+================================================================
?         | Toggles info about available keys
          | (depends on space left in the status bar)
----------+----------------------------------------------------------------
Backspace | Removes the previouse entered character, or closes the entering
          | phase if no character found.
----------+----------------------------------------------------------------
Esc       | Closes the list - depends on settings

2.5.1.6.2 Nop (outside the entering phase)~

Key       | Action
==========+================================================================
?         | Toggles info about available keys
          | (depends on space left in the status bar)
----------+----------------------------------------------------------------
Backspace | Deletes the search query
----------+----------------------------------------------------------------
q         | Closes the list - depends on settings
Esc       |
C-Space   |
----------+----------------------------------------------------------------
Q         | Quits Vim (but with a prompt if unsaved workspaces or tab
          | buffers were found)
----------+----------------------------------------------------------------
a         | Toggles between Single Tab and All Tabs modes
----------+----------------------------------------------------------------
A         | Enters the Add a File mode
----------+----------------------------------------------------------------
C-p       | Brings back the previous searched text
----------+----------------------------------------------------------------
C-n       | Brings the next searched text - just the opposite to `C-p`

2.5.2 Workspace List~

Unicode Symbol | ASCII Symbol | Mode
===============+==============+==========
     ⋮ → ∙     |    LOAD      | Load mode
---------------+--------------+----------
     ∙ → ⋮     |    SAVE      | Save mode

The plugin allows you to save and load so called "workspaces". A workspace is
a set of opened windows, tabs, their names, and buffers. In fact, the word
"workspace" can be considered as a synonym of a "session" in Vim-CtrlSpace.

The ability of having so many "sessions" available at hand creates a lot of
interesting use cases! For example, you can have a workspace for each task or
feature you are working on. It's very easy to switch from one workspace to
another, thus this could be helpful with reviewing completed tasks and
continuing work on an item after some period of time. Moreover, you can have
special workspaces that are prepared to be appended to others. Consider, e.g.
a "Config" workspace. Imagine, you have a separate workspace with the only one
tab named "Config" and some config files opened there. You can easily append
that workspace to you current or next ones, depending on your needs. That way
you are able to group the common and repetative sets of files in just one place
and reuse that group in many contexts.

In the Workspace mode Vim-CtrlSpace shows you available workspaces instead
of buffers. By default this mode is displayed in the Load mode. The second
available mode is the Save one.

Workspaces are saved in a file inside the project directory. Its name and path
is determined by proper plugin configuration options
(`g:ctrlspace_workspace_file`). If there are 2 or more split windows in a tab,
they will be recreated as horizontal or vertical splits while loading
(depending on `g:ctrlspace_use_horizontal_splits` settings).

It's also possible to automatically load the last active workspace on Vim
startup and save it active workspace on Vim exit. See
`g:ctrlspace_load_last_workspace_on_start` and
`g:ctrlspace_save_workspace_on_exit` for more details.

Keys Reference~

Help~

Key       | Action
==========+================================================================
?         | Toggles info about available keys
          | (depends on space left in the status bar)

Accepting~

Key       | Action
==========+================================================================
CR        | Loads (or save) the selected workspace

Exiting~

Key       | Action
==========+================================================================
Backspace | Goes back (here it will return to the Buffer List)
w         |
----------+----------------------------------------------------------------
l         | Goes to the Tab List
----------+----------------------------------------------------------------
q         | Closes the list - depends on settings
Esc       |
C-Space   |
----------+----------------------------------------------------------------
Q         | Quits Vim (but with a prompt if unsaved workspaces or tab
          | buffers were found)

Workspace operations~

Key       | Action
==========+================================================================
a         | Appends a selected workspace to the current one
----------+----------------------------------------------------------------
s         | Toggles the mode from Load or Save (or backward)
----------+----------------------------------------------------------------
S         | Saves the workspace immediately
----------+----------------------------------------------------------------
L         | Loads the last active workspace (if present)
----------+----------------------------------------------------------------
d         | Deletes the selected workspace

Moving~

Key       | Action
==========+================================================================
j         | Moves the selection bar down
----------+----------------------------------------------------------------
k         | Moves the selection bar up
----------+----------------------------------------------------------------
J         | Moves the selection bar to the bottom of the list
----------+----------------------------------------------------------------
K         | Moves the selection bar to the top of the list
----------+----------------------------------------------------------------
C-f       | Moves the selection bar one screen down
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-b       | Moves the selection bar one screen up
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-d       | Moves the selection bar a half screen down
          | (just like standard Vim behavior)
----------+----------------------------------------------------------------
C-u       | Moves the selection bar a half screen up
          | (just like standard Vim behavior)

2.5.3 Tab List~

Unicode Symbol | ASCII Symbol
===============+=============
      ∘∘∘      |    TABS

Tabs in **Vim-CtrlSpace**, due to this plugin nature, are used more extensively
than their normal Vim usage. Vim author, Bram Moolenaar in his great talk "7
Habits of Effective Text Editing" (http://www.youtube.com/watch?v=p6K4iIMlouI)
stated that if you needed more than 10 tabs then probably you were doing something
wrong. In Vim-CtrlSpace tab pages are great, labelled containers for buffers,
and therefore their usage increases. All it means that the default tabline
feature used in Vim to organize tab pages is not sufficient sometimes. For
example, you might have more tabs (and with wider labels) which don't fit the
tabline width, causing rendering problems.

In the Tab List view you can list all tabs. You can even turn off your tabline
entirely and stick to that list only via Vim's `showtabline` option.

Keys Reference~

Help~

Key       | Action
==========+================================================================
?         | Toggles info about available keys
          | (depends on space left in the status bar)

Opening and closing~

Key       | Action
==========+================================================================
CR        | Opens a selected tab and enters the Buffer List view
----------+----------------------------------------------------------------
Tab       | Opens a selected tab and closes the plugin window
----------+----------------------------------------------------------------
Space     | Opens a selected tab but stays in the Tab List view
----------+----------------------------------------------------------------
0..9      | Jumps to the n-th tab (0 is for the 10th one)
----------+----------------------------------------------------------------
c         | Closes the selected tab, then closes forgotten buffers and
          | empty nonames

Exiting~

Key       | Action
==========+================================================================
Backspace | Goes back (here it will return to the Buffer List view)
l         |
----------+----------------------------------------------------------------
w         | Goes to the Workspace List view
----------+----------------------------------------------------------------
q         | Closes the list - depends on settings
Esc       |
C-Space   |
----------+----------------------------------------------------------------
Q         | Quits Vim (but with a prompt if unsaved workspaces or tab
          | buffers were found)


Tabs operations~

Key       | Action
==========+================================================================
-         | Moves the current tab backward (decreases its number)
----------+----------------------------------------------------------------
+         | Moves the selected forward (increases its number)
----------+----------------------------------------------------------------
=         | Changes the selected tab name
----------+----------------------------------------------------------------
_         | Removes the selected tab name
----------+----------------------------------------------------------------
[         | Goes to the previous tab
----------+----------------------------------------------------------------
]         | Goes to the next tab
----------+----------------------------------------------------------------
t         | Creates a new tab nexto to the current one
----------+----------------------------------------------------------------
y         | Creates a copy of the current tab

Moving~

Key       | Action
==========+================================================================
j         | Moves the selection bar down
----------+----------------------------------------------------------------
k         | Moves the selection bar up
----------+----------------------------------------------------------------
J         | Moves the selection bar to the bottom of the list
----------+----------------------------------------------------------------
K         | Moves the selection bar to the top of the list
----------+----------------------------------------------------------------
p         | Moves the selection bar to the previous opened tab
----------+----------------------------------------------------------------
P         | Moves the selection bar to the previous opened tab and opens
          | it immediately
----------+----------------------------------------------------------------
n         | Moves the selection bar to the next opened tab
          | (just the reverse of `p`)
----------+----------------------------------------------------------------
C-f       | Moves the selection bar one screen down
----------+----------------------------------------------------------------
C-b       | Moves the selection bar one screen up
----------+----------------------------------------------------------------
C-d       | Moves the selection bar a half screen down
----------+----------------------------------------------------------------
C-u       | Moves the selection bar a half screen up


------------------------------------------------------------------------------
3. Configuration                                       *ctrlspace-configuration*

Vim-CtrlSpace has following configuration options. Almost all of them are
declared as global variables and should be defined in your `.vimrc` file in the
similar form: >

    let g:ctrlspace_foo_bar = 123
<
3.1 *g:ctrlspace_height*

Sets the minimal height of the plugin window. Default value: `1`.

3.2 *g:ctrlspace_max_height*

Sets the maximum height of the plugin window. If `0` provided it uses 1/3 of the
screen height. Default value: `0`.

3.3 *g:ctrlspace_show_unnamed*

Adjusts the displaying of unnamed buffers. If you set
`g:ctrlspace_show_unnamed` `=` `1` then unnamed buffers will be shown on the list
all the time. However, if you set this value to `2`, unnamed buffers will be
displayed only if they are modified or just visible on the screen. Of course you
can hide unnamed buffers permanently by setting `g:ctrlspace_show_unnamed` `=` `0`.
Default value: `2`.

3.4 *g:ctrlspace_set_default_mapping*

Turns on the default mapping. If you turn this option off (`0`) you will have to
provide your own mapping to the `CtrlSpace` yourself. Default value: `1`.

3.5 *g:ctrlspace_default_mapping_key*

By default, Vim-CtrlSpace maps itself to `C-Space`. If you want to
change the default mapping provide it here as a string with valid Vim keystroke
notation. Default value: `"<C-Space>"`.

3.6 *g:ctrlspace_cyclic_list*

Determines if the list should be cyclic or not. The cyclic list means you will
jump to the last item if you continue to move up beyond the first one and
vice-versa. You will jump to the first one if you continue to move down after
you reach the bottom of the list. Default value: `1`.

3.7 *g:ctrlspace_default_sort_order*

The default sort order. `0` turns off sorting, `1` - the default sorting is
chronological, `2` - alphanumeric. Default value: `2`.

3.8 *g:ctrlspace_use_ruby_bindings*

If set to `1`, the plugin will try to use your compiled in Ruby bindings to
increase the speed of the plugin (e.g. while fuzzy search, since regex
operations are much faster in Ruby than in VimScript). Default value: `1`.

To see if you have Ruby bindings enabled you can use the command `:version`
and see if there is a `+ruby` entry. Or just try the following one: >

    :ruby puts RUBY_VERSION
<
- you should get the Ruby version or just an error.

3.9 *g:ctrlspace_use_tabline*

Should Vim-CtrlSpace change your default tabline to its own? Default value: `1`.

3.10 *g:ctrlspace_use_mouse_and_arrows*

Should the plugin use mouse, arrows and `Home`, `End`, `PageUp`, `PageDown`
keys. Disables the `Esc` key if turned on. Default value: `0`.

3.11 *g:ctrlspace_use_horizontal_splits*

Determines whether the plugin use vertical (`0`) or horizontal (`1`) splits if
necessary while loading a workspace. Default value: `0`.

3.12 *g:ctrlspace_workspace_file*

This entry provides an array of strings with default names of workspaces file.
If a name is preceded with a directory, and that directory is found in the
project root, that entry will be used. Otherwise that would be the last one. In
that way you can hide the workspaces file, for example, in the repository
directory. Default value: >

    [".git/cs_workspaces", ".svn/cs_workspaces", ".hg/cs_workspaces",
    \ ".bzr/cs_workspaces", "CVS/cs_workspaces", ".cs_workspaces"]
<
3.13 *g:ctrlspace_save_workspace_on_exit*

Saves the active workspace (if present) on Vim quit. If this option is set, the
Vim quit (`Q`) action from the plugin modes does not check for workspace
changes. Default value: `0`.

3.14 *g:ctrlspace_load_last_workspace_on_start*

Loads the last active workspace (if found) on Vim startup. Default value: `0`.

3.15 *g:ctrlspace_cache_dir*

A directory for the **Vim-CtrlSpace** cache file (`.cs_cache`). By default your
`$HOME` directory will be used.

3.16 *g:ctrlspace_project_root_markers*

An array of directory names which presence indicates the project root. If no
marker is found, you will be asked to confirm the project root basing on the
current working directory. Make this array empty to disable this functionality.
Default value: >

    [".git", ".hg", ".svn", ".bzr", "_darcs", "CVS"]
<
3.17 *g:ctrlspace_unicode_font*

Set to `1` if you want to use Unicode symbols, or `0` otherwise. Default value: `1`.

3.18 *g:ctrlspace_symbols*

Enables you to provide your own symbols. It's useful if for example your font
doesn't contain enough symbols or the glyphs are poorly rendered. Default value: >

    if g:ctrlspace_unicode_font
      let g:ctrlspace_symbols = {
            \ "cs"      : "▢",
            \ "tab"     : "⊙",
            \ "all"     : "∷",
            \ "add"     : "○",
            \ "tabs"    : "∘∘∘",
            \ "load"    : "⋮ → ∙",
            \ "save"    : "∙ → ⋮",
            \ "ord"     : "₁²₃",
            \ "abc"     : "авс",
            \ "prv"     : "⌕",
            \ "s_left"  : "›",
            \ "s_right" : "‹"
            \ }
    else
      let g:ctrlspace_symbols = {
            \ "cs"      : "CS",
            \ "tab"     : "TAB",
            \ "all"     : "ALL",
            \ "add"     : "ADD",
            \ "tabs"    : "TABS",
            \ "load"    : "LOAD",
            \ "save"    : "SAVE",
            \ "ord"     : "123",
            \ "abc"     : "ABC",
            \ "prv"     : "*",
            \ "s_left"  : "[",
            \ "s_right" : "]"
            \ }
    endif
<
Of course, you don't have to mind the |g:ctrlspace_unicode_font| settings
anymore. Just provide one array here.

3.19 *g:ctrlspace_ignored_files*

The expression used to ignore some files during file collecting. It is used in
addition to the |wildignore| option in Vim. Default value: `'\v(tmp|temp)[\/]'`.

3.20 *g:ctrlspace_show_key_info*

Should the _key info help_ (toggled by `?`) be visible (`1`) by default or not
(`0`). Default value: `0`.

3.21 *g:ctrlspace_show_tab_info*

Should the tab info be visible (`1`) or not (`0`). Default value:
`!&showtabline`. That means that it will be enabled by default if you turn off
the default tabline.

3.22 *g:ctrlspace_search_timing*

Allows you to adjust search smoothness. Contains an array of two integer values.
If the size of the list is lower than the first value, that value will be used
for search delay. Similarly, if the size of the list is greater than the second
value, then that value will be used for search delay. In all other cases the
delay will equal the list size. That way the plugin ensures smooth search
input behavior. Default value: `[50,500]`.

3.23 *g:ctrlspace_search_resonators*

Allows you to set characters which will be used to increase search accurancy. If
such resonator is found next to the searched sequence, it increases the search
score. For example, consider following files: `zzzabczzz.txt`, `zzzzzzabc.txt`,
and `zzzzz.abc.txt`. If you search for `abc` with default resonators, you will
get the last file as the top relevant item, because there are two resonators
(dots) next to the searched sequence. Next you would get the middle one (one dot
around `abc`), and then the first one (no resonators at all). You can disable
this behavior completely by providing an empty array.
Default value: `['.','/','\','_','-']`

3.24 Colors~

The plugin allows you to define its colors entirely. By default it comes with
pure black and white color set. You are supposed to tweak its colors on your own
(in the `.vimrc` file). This can be done as shown below: >

    hi CtrlSpaceSelected term=reverse ctermfg=187  ctermbg=23  cterm=bold
    hi CtrlSpaceNormal   term=NONE    ctermfg=244  ctermbg=232 cterm=NONE
    hi CtrlSpaceFound    ctermfg=220  ctermbg=NONE cterm=bold
<
The colors defined above can be seen in the demo movie. They fit well the
Seoul256 (https://github.com/junegunn/seoul256.vim) color scheme. Another
useful example can be found here: >

    hi CtrlSpaceSelected term=reverse ctermfg=white ctermbg=black cterm=bold
    hi CtrlSpaceNormal   term=NONE    ctermfg=black ctermbg=228   cterm=NONE
    hi CtrlSpaceFound    ctermfg=125  ctermbg=NONE  cterm=bold
<
If you use a console Vim that
chart (http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html) might be
helpful.


------------------------------------------------------------------------------
4. API                                                           *ctrlspace-api*

4.1 Commands~

At the moment Vim-CtrlSpace provides you 4 commands: `:CtrlSpace` and
`:CtrlSpaceTabLabel`, `:CtrlSpaceSaveWorkspace`, and `:CtrlSpaceLoadWorkspace`.

4.1.1 *:CtrlSpace*

Shows the plugin window. It is meant to be used in custom mappings or more
sophisticated plugin integration.

4.1.2 *:CtrlSpaceTabLabel*

Allows you to define a custom mapping (outside Vim-CtrlSpace) to change
a custom tab name.

4.1.3 *:CtrlSpaceClearTabLabel*

Removes a custom tab label.

4.1.4 *:CtrlSpaceSaveWorkspace* [my workspace]

Saves the workspace with the given name. If no name is given then it saves the
active workspace (if present).

4.1.5 *:CtrlSpaceLoadWorkspace* [my workspace]

Loads the workspace with the given name. It has also a banged version
(*:CtrlSpaceLoadWorkspace!* `my` `workspace`) which performs appending instead of
loading. If no name is give then it loads (or appends) the active workspace (if
present).

4.2 Functions~

Vim-CtrlSpace provides you a couple of functions defined in the common
`ctrlspace` namespace. They can be used for custom status line integration,
tabline integration, or just for more advanced interactions with other plugins.

4.2.1 *ctrlspace#bufferlist(tabnr)*

Returns a directory of buffer number and name pairs for given tab. This is the
content of the internal buffer list belonging to the specified tab.

4.2.2 *ctrlspace#statusline_key_info_segment(...)*

Returns the info about available keys for the current plugin mode (toggled by
`?`). It can take an optional separator. It can be useful for a custom status
line integration (i.e. in plugins like LightLine
(https://github.com/itchyny/lightline.vim))

4.2.3 *ctrlspace#statusline_info_segment(...)*

Returns the info about the mode of the plugin. It can take an optional
separator. It can be useful for a custom status line integration (i.e. in
plugins like LightLine (https://github.com/itchyny/lightline.vim))

4.2.4 *ctrlspace#statusline_tab_info_segment(...)*

Returns the info about the current tab (tab number, label, etc.). It is useful
if you don't use the custom tabline string (or perhaps you have set
`showtabline` to `0` (see `:help` `showtabline` for more info)).

4.2.5 *ctrlspace#tabline()*

Provides the custom tabline string.

4.2.6 *ctrlspace#guitablabel()*

Provides the custom label for GVim's tabs.


------------------------------------------------------------------------------
5. Authors and License                               *ctrlspace-authors-license*

Copyright (c) 2013-2014 Szymon Wrozynski and Contributors
(https://github.com/szw/vim-ctrlspace/commits/master).
Licensed under MIT License conditions
(https://github.com/szw/vim-ctrlspace/blob/master/plugin/ctrlspace.vim#L5-L26).

Vim-CtrlSpace is based on Robert Lillack plugin VIM bufferlist
(https://github.com/roblillack/vim-bufferlist) (c) 2005 Robert Lillack.
Moreover some concepts of and inspiration has been taken from Vim-Tabber
(https://github.com/fweep/vim-tabber) by Jim Steward and Tabline
(https://github.com/mkitt/tabline.vim) by Matthew Kitt.

vim:tw=78:ts=8:ft=help:norl:
